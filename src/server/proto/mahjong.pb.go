// Code generated by protoc-gen-go.
// source: mahjong.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	mahjong.proto

It has these top-level messages:
	LoginReq
	LoginRsp
	CreateTableReq
	CreateTableRsp
	JoinTableReq
	JoinTableRsp
	OperatReq
	OperatRsp
	DealReq
	DealRsp
	DrawReq
	DrawRsp
	HuReq
	HuRsp
	Eat
	EatReq
	EatRsp
	PongReq
	PongRsp
	Gang
	GangReq
	GangRsp
	DropReq
	DropRsp
	UserJoinTableMsg
	OperatMsg
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type OperatType int32

const (
	OperatType_Unkonw     OperatType = 0
	OperatType_DealOperat OperatType = 1
	OperatType_DrawOperat OperatType = 2
	OperatType_HuOperat   OperatType = 4
	OperatType_EatOperat  OperatType = 8
	OperatType_PongOperat OperatType = 16
	OperatType_GangOperat OperatType = 32
	OperatType_DropOperat OperatType = 64
)

var OperatType_name = map[int32]string{
	0:  "Unkonw",
	1:  "DealOperat",
	2:  "DrawOperat",
	4:  "HuOperat",
	8:  "EatOperat",
	16: "PongOperat",
	32: "GangOperat",
	64: "DropOperat",
}
var OperatType_value = map[string]int32{
	"Unkonw":     0,
	"DealOperat": 1,
	"DrawOperat": 2,
	"HuOperat":   4,
	"EatOperat":  8,
	"PongOperat": 16,
	"GangOperat": 32,
	"DropOperat": 64,
}

func (x OperatType) String() string {
	return proto1.EnumName(OperatType_name, int32(x))
}
func (OperatType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HuType int32

const (
	HuType_Nomal     HuType = 0
	HuType_Mo        HuType = 1
	HuType_GangHua   HuType = 2
	HuType_QiangGang HuType = 3
)

var HuType_name = map[int32]string{
	0: "Nomal",
	1: "Mo",
	2: "GangHua",
	3: "QiangGang",
}
var HuType_value = map[string]int32{
	"Nomal":     0,
	"Mo":        1,
	"GangHua":   2,
	"QiangGang": 3,
}

func (x HuType) String() string {
	return proto1.EnumName(HuType_name, int32(x))
}
func (HuType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GangType int32

const (
	GangType_MingGang GangType = 0
	GangType_BuGang   GangType = 1
	GangType_AnGang   GangType = 2
)

var GangType_name = map[int32]string{
	0: "MingGang",
	1: "BuGang",
	2: "AnGang",
}
var GangType_value = map[string]int32{
	"MingGang": 0,
	"BuGang":   1,
	"AnGang":   2,
}

func (x GangType) String() string {
	return proto1.EnumName(GangType_name, int32(x))
}
func (GangType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type CreateTableReq_TableType int32

const (
	CreateTableReq_TableRobot CreateTableReq_TableType = 0
	CreateTableReq_TableNomal CreateTableReq_TableType = 1
)

var CreateTableReq_TableType_name = map[int32]string{
	0: "TableRobot",
	1: "TableNomal",
}
var CreateTableReq_TableType_value = map[string]int32{
	"TableRobot": 0,
	"TableNomal": 1,
}

func (x CreateTableReq_TableType) String() string {
	return proto1.EnumName(CreateTableReq_TableType_name, int32(x))
}
func (CreateTableReq_TableType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type LoginReq struct {
	Uid    uint64 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Passwd string `protobuf:"bytes,2,opt,name=passwd" json:"passwd,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *LoginReq) Reset()                    { *m = LoginReq{} }
func (m *LoginReq) String() string            { return proto1.CompactTextString(m) }
func (*LoginReq) ProtoMessage()               {}
func (*LoginReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LoginReq) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *LoginReq) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

func (m *LoginReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type LoginRsp struct {
	ErrCode int32  `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
	ErrMsg  string `protobuf:"bytes,2,opt,name=err_msg,json=errMsg" json:"err_msg,omitempty"`
}

func (m *LoginRsp) Reset()                    { *m = LoginRsp{} }
func (m *LoginRsp) String() string            { return proto1.CompactTextString(m) }
func (*LoginRsp) ProtoMessage()               {}
func (*LoginRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LoginRsp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *LoginRsp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CreateTableReq struct {
	Type int32 `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
}

func (m *CreateTableReq) Reset()                    { *m = CreateTableReq{} }
func (m *CreateTableReq) String() string            { return proto1.CompactTextString(m) }
func (*CreateTableReq) ProtoMessage()               {}
func (*CreateTableReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateTableReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type CreateTableRsp struct {
	ErrCode int32  `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
	ErrMsg  string `protobuf:"bytes,2,opt,name=err_msg,json=errMsg" json:"err_msg,omitempty"`
	TableId uint32 `protobuf:"varint,3,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
}

func (m *CreateTableRsp) Reset()                    { *m = CreateTableRsp{} }
func (m *CreateTableRsp) String() string            { return proto1.CompactTextString(m) }
func (*CreateTableRsp) ProtoMessage()               {}
func (*CreateTableRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateTableRsp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *CreateTableRsp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CreateTableRsp) GetTableId() uint32 {
	if m != nil {
		return m.TableId
	}
	return 0
}

type JoinTableReq struct {
	TableId uint32 `protobuf:"varint,2,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
}

func (m *JoinTableReq) Reset()                    { *m = JoinTableReq{} }
func (m *JoinTableReq) String() string            { return proto1.CompactTextString(m) }
func (*JoinTableReq) ProtoMessage()               {}
func (*JoinTableReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *JoinTableReq) GetTableId() uint32 {
	if m != nil {
		return m.TableId
	}
	return 0
}

type JoinTableRsp struct {
	ErrCode int32  `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
	ErrMsg  string `protobuf:"bytes,2,opt,name=err_msg,json=errMsg" json:"err_msg,omitempty"`
}

func (m *JoinTableRsp) Reset()                    { *m = JoinTableRsp{} }
func (m *JoinTableRsp) String() string            { return proto1.CompactTextString(m) }
func (*JoinTableRsp) ProtoMessage()               {}
func (*JoinTableRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *JoinTableRsp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *JoinTableRsp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type OperatReq struct {
	Type    OperatType `protobuf:"varint,1,opt,name=type,enum=proto.OperatType" json:"type,omitempty"`
	DealReq *DealReq   `protobuf:"bytes,2,opt,name=dealReq" json:"dealReq,omitempty"`
	DrawReq *DrawReq   `protobuf:"bytes,3,opt,name=drawReq" json:"drawReq,omitempty"`
	HuReq   *HuReq     `protobuf:"bytes,4,opt,name=huReq" json:"huReq,omitempty"`
	EatReq  *EatReq    `protobuf:"bytes,5,opt,name=eatReq" json:"eatReq,omitempty"`
	PongReq *PongReq   `protobuf:"bytes,6,opt,name=pongReq" json:"pongReq,omitempty"`
	GangReq *GangReq   `protobuf:"bytes,7,opt,name=gangReq" json:"gangReq,omitempty"`
	DropReq *DropReq   `protobuf:"bytes,8,opt,name=dropReq" json:"dropReq,omitempty"`
}

func (m *OperatReq) Reset()                    { *m = OperatReq{} }
func (m *OperatReq) String() string            { return proto1.CompactTextString(m) }
func (*OperatReq) ProtoMessage()               {}
func (*OperatReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *OperatReq) GetType() OperatType {
	if m != nil {
		return m.Type
	}
	return OperatType_Unkonw
}

func (m *OperatReq) GetDealReq() *DealReq {
	if m != nil {
		return m.DealReq
	}
	return nil
}

func (m *OperatReq) GetDrawReq() *DrawReq {
	if m != nil {
		return m.DrawReq
	}
	return nil
}

func (m *OperatReq) GetHuReq() *HuReq {
	if m != nil {
		return m.HuReq
	}
	return nil
}

func (m *OperatReq) GetEatReq() *EatReq {
	if m != nil {
		return m.EatReq
	}
	return nil
}

func (m *OperatReq) GetPongReq() *PongReq {
	if m != nil {
		return m.PongReq
	}
	return nil
}

func (m *OperatReq) GetGangReq() *GangReq {
	if m != nil {
		return m.GangReq
	}
	return nil
}

func (m *OperatReq) GetDropReq() *DropReq {
	if m != nil {
		return m.DropReq
	}
	return nil
}

type OperatRsp struct {
	ErrCode int32      `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
	ErrMsg  string     `protobuf:"bytes,2,opt,name=err_msg,json=errMsg" json:"err_msg,omitempty"`
	Type    OperatType `protobuf:"varint,3,opt,name=type,enum=proto.OperatType" json:"type,omitempty"`
	DealRsp *DealRsp   `protobuf:"bytes,4,opt,name=dealRsp" json:"dealRsp,omitempty"`
	DrawRsp *DrawRsp   `protobuf:"bytes,5,opt,name=drawRsp" json:"drawRsp,omitempty"`
	HuRsp   *HuRsp     `protobuf:"bytes,6,opt,name=huRsp" json:"huRsp,omitempty"`
	EatRsp  *EatRsp    `protobuf:"bytes,7,opt,name=eatRsp" json:"eatRsp,omitempty"`
	PongRsp *PongRsp   `protobuf:"bytes,8,opt,name=pongRsp" json:"pongRsp,omitempty"`
	GangRsp *GangRsp   `protobuf:"bytes,9,opt,name=gangRsp" json:"gangRsp,omitempty"`
	DropRsp *DropRsp   `protobuf:"bytes,10,opt,name=dropRsp" json:"dropRsp,omitempty"`
}

func (m *OperatRsp) Reset()                    { *m = OperatRsp{} }
func (m *OperatRsp) String() string            { return proto1.CompactTextString(m) }
func (*OperatRsp) ProtoMessage()               {}
func (*OperatRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *OperatRsp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *OperatRsp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *OperatRsp) GetType() OperatType {
	if m != nil {
		return m.Type
	}
	return OperatType_Unkonw
}

func (m *OperatRsp) GetDealRsp() *DealRsp {
	if m != nil {
		return m.DealRsp
	}
	return nil
}

func (m *OperatRsp) GetDrawRsp() *DrawRsp {
	if m != nil {
		return m.DrawRsp
	}
	return nil
}

func (m *OperatRsp) GetHuRsp() *HuRsp {
	if m != nil {
		return m.HuRsp
	}
	return nil
}

func (m *OperatRsp) GetEatRsp() *EatRsp {
	if m != nil {
		return m.EatRsp
	}
	return nil
}

func (m *OperatRsp) GetPongRsp() *PongRsp {
	if m != nil {
		return m.PongRsp
	}
	return nil
}

func (m *OperatRsp) GetGangRsp() *GangRsp {
	if m != nil {
		return m.GangRsp
	}
	return nil
}

func (m *OperatRsp) GetDropRsp() *DropRsp {
	if m != nil {
		return m.DropRsp
	}
	return nil
}

type DealReq struct {
	Uid     uint64  `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Cards   []int32 `protobuf:"varint,2,rep,packed,name=cards" json:"cards,omitempty"`
	FanCard int32   `protobuf:"varint,3,opt,name=fan_card,json=fanCard" json:"fan_card,omitempty"`
	HunCard int32   `protobuf:"varint,4,opt,name=hun_card,json=hunCard" json:"hun_card,omitempty"`
}

func (m *DealReq) Reset()                    { *m = DealReq{} }
func (m *DealReq) String() string            { return proto1.CompactTextString(m) }
func (*DealReq) ProtoMessage()               {}
func (*DealReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DealReq) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *DealReq) GetCards() []int32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *DealReq) GetFanCard() int32 {
	if m != nil {
		return m.FanCard
	}
	return 0
}

func (m *DealReq) GetHunCard() int32 {
	if m != nil {
		return m.HunCard
	}
	return 0
}

type DealRsp struct {
}

func (m *DealRsp) Reset()                    { *m = DealRsp{} }
func (m *DealRsp) String() string            { return proto1.CompactTextString(m) }
func (*DealRsp) ProtoMessage()               {}
func (*DealRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type DrawReq struct {
	Card int32 `protobuf:"varint,1,opt,name=card" json:"card,omitempty"`
}

func (m *DrawReq) Reset()                    { *m = DrawReq{} }
func (m *DrawReq) String() string            { return proto1.CompactTextString(m) }
func (*DrawReq) ProtoMessage()               {}
func (*DrawReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DrawReq) GetCard() int32 {
	if m != nil {
		return m.Card
	}
	return 0
}

type DrawRsp struct {
}

func (m *DrawRsp) Reset()                    { *m = DrawRsp{} }
func (m *DrawRsp) String() string            { return proto1.CompactTextString(m) }
func (*DrawRsp) ProtoMessage()               {}
func (*DrawRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type HuReq struct {
	Card int32  `protobuf:"varint,1,opt,name=card" json:"card,omitempty"`
	Type HuType `protobuf:"varint,2,opt,name=type,enum=proto.HuType" json:"type,omitempty"`
	Lose uint64 `protobuf:"varint,3,opt,name=lose" json:"lose,omitempty"`
}

func (m *HuReq) Reset()                    { *m = HuReq{} }
func (m *HuReq) String() string            { return proto1.CompactTextString(m) }
func (*HuReq) ProtoMessage()               {}
func (*HuReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *HuReq) GetCard() int32 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *HuReq) GetType() HuType {
	if m != nil {
		return m.Type
	}
	return HuType_Nomal
}

func (m *HuReq) GetLose() uint64 {
	if m != nil {
		return m.Lose
	}
	return 0
}

type HuRsp struct {
	Ok   bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Card int32  `protobuf:"varint,2,opt,name=card" json:"card,omitempty"`
	Type HuType `protobuf:"varint,3,opt,name=type,enum=proto.HuType" json:"type,omitempty"`
	Lose uint64 `protobuf:"varint,4,opt,name=lose" json:"lose,omitempty"`
}

func (m *HuRsp) Reset()                    { *m = HuRsp{} }
func (m *HuRsp) String() string            { return proto1.CompactTextString(m) }
func (*HuRsp) ProtoMessage()               {}
func (*HuRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *HuRsp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *HuRsp) GetCard() int32 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *HuRsp) GetType() HuType {
	if m != nil {
		return m.Type
	}
	return HuType_Nomal
}

func (m *HuRsp) GetLose() uint64 {
	if m != nil {
		return m.Lose
	}
	return 0
}

type Eat struct {
	HandCard []int32 `protobuf:"varint,1,rep,packed,name=hand_card,json=handCard" json:"hand_card,omitempty"`
	WaveCard []int32 `protobuf:"varint,2,rep,packed,name=wave_card,json=waveCard" json:"wave_card,omitempty"`
}

func (m *Eat) Reset()                    { *m = Eat{} }
func (m *Eat) String() string            { return proto1.CompactTextString(m) }
func (*Eat) ProtoMessage()               {}
func (*Eat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Eat) GetHandCard() []int32 {
	if m != nil {
		return m.HandCard
	}
	return nil
}

func (m *Eat) GetWaveCard() []int32 {
	if m != nil {
		return m.WaveCard
	}
	return nil
}

type EatReq struct {
	Eat []*Eat `protobuf:"bytes,1,rep,name=eat" json:"eat,omitempty"`
}

func (m *EatReq) Reset()                    { *m = EatReq{} }
func (m *EatReq) String() string            { return proto1.CompactTextString(m) }
func (*EatReq) ProtoMessage()               {}
func (*EatReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *EatReq) GetEat() []*Eat {
	if m != nil {
		return m.Eat
	}
	return nil
}

type EatRsp struct {
	Eat *Eat `protobuf:"bytes,1,opt,name=eat" json:"eat,omitempty"`
}

func (m *EatRsp) Reset()                    { *m = EatRsp{} }
func (m *EatRsp) String() string            { return proto1.CompactTextString(m) }
func (*EatRsp) ProtoMessage()               {}
func (*EatRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *EatRsp) GetEat() *Eat {
	if m != nil {
		return m.Eat
	}
	return nil
}

type PongReq struct {
	Card int32 `protobuf:"varint,1,opt,name=card" json:"card,omitempty"`
}

func (m *PongReq) Reset()                    { *m = PongReq{} }
func (m *PongReq) String() string            { return proto1.CompactTextString(m) }
func (*PongReq) ProtoMessage()               {}
func (*PongReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *PongReq) GetCard() int32 {
	if m != nil {
		return m.Card
	}
	return 0
}

type PongRsp struct {
	Ok   bool  `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Card int32 `protobuf:"varint,2,opt,name=card" json:"card,omitempty"`
}

func (m *PongRsp) Reset()                    { *m = PongRsp{} }
func (m *PongRsp) String() string            { return proto1.CompactTextString(m) }
func (*PongRsp) ProtoMessage()               {}
func (*PongRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *PongRsp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *PongRsp) GetCard() int32 {
	if m != nil {
		return m.Card
	}
	return 0
}

type Gang struct {
	Card int32    `protobuf:"varint,1,opt,name=card" json:"card,omitempty"`
	Type GangType `protobuf:"varint,2,opt,name=type,enum=proto.GangType" json:"type,omitempty"`
}

func (m *Gang) Reset()                    { *m = Gang{} }
func (m *Gang) String() string            { return proto1.CompactTextString(m) }
func (*Gang) ProtoMessage()               {}
func (*Gang) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Gang) GetCard() int32 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *Gang) GetType() GangType {
	if m != nil {
		return m.Type
	}
	return GangType_MingGang
}

type GangReq struct {
	Gang []*Gang `protobuf:"bytes,1,rep,name=gang" json:"gang,omitempty"`
}

func (m *GangReq) Reset()                    { *m = GangReq{} }
func (m *GangReq) String() string            { return proto1.CompactTextString(m) }
func (*GangReq) ProtoMessage()               {}
func (*GangReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *GangReq) GetGang() []*Gang {
	if m != nil {
		return m.Gang
	}
	return nil
}

type GangRsp struct {
	Ok   bool  `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Gang *Gang `protobuf:"bytes,2,opt,name=gang" json:"gang,omitempty"`
}

func (m *GangRsp) Reset()                    { *m = GangRsp{} }
func (m *GangRsp) String() string            { return proto1.CompactTextString(m) }
func (*GangRsp) ProtoMessage()               {}
func (*GangRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *GangRsp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *GangRsp) GetGang() *Gang {
	if m != nil {
		return m.Gang
	}
	return nil
}

type DropReq struct {
	Card int32 `protobuf:"varint,2,opt,name=card" json:"card,omitempty"`
}

func (m *DropReq) Reset()                    { *m = DropReq{} }
func (m *DropReq) String() string            { return proto1.CompactTextString(m) }
func (*DropReq) ProtoMessage()               {}
func (*DropReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *DropReq) GetCard() int32 {
	if m != nil {
		return m.Card
	}
	return 0
}

type DropRsp struct {
	DisCard int32 `protobuf:"varint,3,opt,name=dis_card,json=disCard" json:"dis_card,omitempty"`
}

func (m *DropRsp) Reset()                    { *m = DropRsp{} }
func (m *DropRsp) String() string            { return proto1.CompactTextString(m) }
func (*DropRsp) ProtoMessage()               {}
func (*DropRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *DropRsp) GetDisCard() int32 {
	if m != nil {
		return m.DisCard
	}
	return 0
}

type UserJoinTableMsg struct {
	Tid  uint32 `protobuf:"varint,1,opt,name=tid" json:"tid,omitempty"`
	Uid  uint64 `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Pos  int32  `protobuf:"varint,4,opt,name=pos" json:"pos,omitempty"`
}

func (m *UserJoinTableMsg) Reset()                    { *m = UserJoinTableMsg{} }
func (m *UserJoinTableMsg) String() string            { return proto1.CompactTextString(m) }
func (*UserJoinTableMsg) ProtoMessage()               {}
func (*UserJoinTableMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *UserJoinTableMsg) GetTid() uint32 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *UserJoinTableMsg) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UserJoinTableMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserJoinTableMsg) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

type OperatMsg struct {
	Uid  uint64     `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Type OperatType `protobuf:"varint,2,opt,name=type,enum=proto.OperatType" json:"type,omitempty"`
	Deal *DealRsp   `protobuf:"bytes,3,opt,name=deal" json:"deal,omitempty"`
	Draw *DrawRsp   `protobuf:"bytes,4,opt,name=draw" json:"draw,omitempty"`
	Hu   *HuRsp     `protobuf:"bytes,5,opt,name=hu" json:"hu,omitempty"`
	Eat  *EatRsp    `protobuf:"bytes,6,opt,name=eat" json:"eat,omitempty"`
	Pong *PongRsp   `protobuf:"bytes,7,opt,name=pong" json:"pong,omitempty"`
	Gang *GangRsp   `protobuf:"bytes,8,opt,name=gang" json:"gang,omitempty"`
	Drop *DropRsp   `protobuf:"bytes,9,opt,name=drop" json:"drop,omitempty"`
}

func (m *OperatMsg) Reset()                    { *m = OperatMsg{} }
func (m *OperatMsg) String() string            { return proto1.CompactTextString(m) }
func (*OperatMsg) ProtoMessage()               {}
func (*OperatMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *OperatMsg) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *OperatMsg) GetType() OperatType {
	if m != nil {
		return m.Type
	}
	return OperatType_Unkonw
}

func (m *OperatMsg) GetDeal() *DealRsp {
	if m != nil {
		return m.Deal
	}
	return nil
}

func (m *OperatMsg) GetDraw() *DrawRsp {
	if m != nil {
		return m.Draw
	}
	return nil
}

func (m *OperatMsg) GetHu() *HuRsp {
	if m != nil {
		return m.Hu
	}
	return nil
}

func (m *OperatMsg) GetEat() *EatRsp {
	if m != nil {
		return m.Eat
	}
	return nil
}

func (m *OperatMsg) GetPong() *PongRsp {
	if m != nil {
		return m.Pong
	}
	return nil
}

func (m *OperatMsg) GetGang() *GangRsp {
	if m != nil {
		return m.Gang
	}
	return nil
}

func (m *OperatMsg) GetDrop() *DropRsp {
	if m != nil {
		return m.Drop
	}
	return nil
}

func init() {
	proto1.RegisterType((*LoginReq)(nil), "proto.LoginReq")
	proto1.RegisterType((*LoginRsp)(nil), "proto.LoginRsp")
	proto1.RegisterType((*CreateTableReq)(nil), "proto.CreateTableReq")
	proto1.RegisterType((*CreateTableRsp)(nil), "proto.CreateTableRsp")
	proto1.RegisterType((*JoinTableReq)(nil), "proto.JoinTableReq")
	proto1.RegisterType((*JoinTableRsp)(nil), "proto.JoinTableRsp")
	proto1.RegisterType((*OperatReq)(nil), "proto.OperatReq")
	proto1.RegisterType((*OperatRsp)(nil), "proto.OperatRsp")
	proto1.RegisterType((*DealReq)(nil), "proto.DealReq")
	proto1.RegisterType((*DealRsp)(nil), "proto.DealRsp")
	proto1.RegisterType((*DrawReq)(nil), "proto.DrawReq")
	proto1.RegisterType((*DrawRsp)(nil), "proto.DrawRsp")
	proto1.RegisterType((*HuReq)(nil), "proto.HuReq")
	proto1.RegisterType((*HuRsp)(nil), "proto.HuRsp")
	proto1.RegisterType((*Eat)(nil), "proto.Eat")
	proto1.RegisterType((*EatReq)(nil), "proto.EatReq")
	proto1.RegisterType((*EatRsp)(nil), "proto.EatRsp")
	proto1.RegisterType((*PongReq)(nil), "proto.PongReq")
	proto1.RegisterType((*PongRsp)(nil), "proto.PongRsp")
	proto1.RegisterType((*Gang)(nil), "proto.Gang")
	proto1.RegisterType((*GangReq)(nil), "proto.GangReq")
	proto1.RegisterType((*GangRsp)(nil), "proto.GangRsp")
	proto1.RegisterType((*DropReq)(nil), "proto.DropReq")
	proto1.RegisterType((*DropRsp)(nil), "proto.DropRsp")
	proto1.RegisterType((*UserJoinTableMsg)(nil), "proto.UserJoinTableMsg")
	proto1.RegisterType((*OperatMsg)(nil), "proto.OperatMsg")
	proto1.RegisterEnum("proto.OperatType", OperatType_name, OperatType_value)
	proto1.RegisterEnum("proto.HuType", HuType_name, HuType_value)
	proto1.RegisterEnum("proto.GangType", GangType_name, GangType_value)
	proto1.RegisterEnum("proto.CreateTableReq_TableType", CreateTableReq_TableType_name, CreateTableReq_TableType_value)
}

func init() { proto1.RegisterFile("mahjong.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1010 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x5f, 0x6f, 0xdc, 0x44,
	0x10, 0xcf, 0xd9, 0xbe, 0x7f, 0x93, 0xe4, 0x30, 0x2b, 0x04, 0x07, 0x6d, 0xd5, 0x60, 0x08, 0x0a,
	0x01, 0x2a, 0x14, 0x1e, 0x90, 0x78, 0x68, 0xa1, 0x21, 0xe2, 0x40, 0x04, 0xda, 0xa5, 0x7d, 0x43,
	0x3a, 0x6d, 0xe2, 0xed, 0xdd, 0x91, 0xc4, 0xbb, 0xf1, 0xda, 0x3d, 0xf5, 0x19, 0xf1, 0x99, 0xf8,
	0x18, 0x7c, 0x25, 0x34, 0xb3, 0x63, 0xc7, 0xbe, 0x1a, 0x51, 0xe5, 0xe9, 0x66, 0xe6, 0xf7, 0xdb,
	0xdd, 0xd9, 0x99, 0xd9, 0x9f, 0x0f, 0x76, 0xaf, 0xd4, 0xf2, 0x0f, 0x93, 0x2d, 0x1e, 0xd8, 0xdc,
	0x14, 0x46, 0xf4, 0xe9, 0x27, 0x99, 0xc1, 0xe8, 0x67, 0xb3, 0x58, 0x65, 0x52, 0x5f, 0x8b, 0x18,
	0xc2, 0x72, 0x95, 0x4e, 0x7b, 0x7b, 0xbd, 0x83, 0x48, 0xa2, 0x29, 0xde, 0x85, 0x81, 0x55, 0xce,
	0xad, 0xd3, 0x69, 0xb0, 0xd7, 0x3b, 0x18, 0x4b, 0xf6, 0x84, 0x80, 0x28, 0x53, 0x57, 0x7a, 0x1a,
	0x52, 0x94, 0xec, 0xe4, 0x61, 0xb5, 0x93, 0xb3, 0xe2, 0x7d, 0x18, 0xe9, 0x3c, 0x9f, 0x9f, 0x9b,
	0x54, 0xd3, 0x76, 0x7d, 0x39, 0xd4, 0x79, 0x7e, 0x6c, 0x52, 0x2d, 0xde, 0x03, 0x34, 0xe7, 0x57,
	0x6e, 0x51, 0xed, 0xa9, 0xf3, 0xfc, 0xd4, 0x2d, 0x92, 0xa7, 0x30, 0x39, 0xce, 0xb5, 0x2a, 0xf4,
	0x33, 0x75, 0x76, 0xa9, 0x31, 0x1f, 0x01, 0x51, 0xf1, 0xca, 0x6a, 0xe2, 0xf5, 0x25, 0xd9, 0xc9,
	0x67, 0x30, 0x26, 0xfc, 0xd9, 0x2b, 0xab, 0xc5, 0x04, 0xc0, 0x93, 0xcd, 0x99, 0x29, 0xe2, 0xad,
	0xda, 0xff, 0xc5, 0x5c, 0xa9, 0xcb, 0xb8, 0x97, 0xcc, 0xdb, 0x5b, 0xde, 0x2e, 0x31, 0x5c, 0x53,
	0xe0, 0xfa, 0xf9, 0x2a, 0xa5, 0x0b, 0xef, 0xca, 0x21, 0xf9, 0x3f, 0xa6, 0xc9, 0xa7, 0xb0, 0xf3,
	0x93, 0x59, 0x65, 0x75, 0xc6, 0x4d, 0x6a, 0xd0, 0xa6, 0x3e, 0x6e, 0x52, 0x6f, 0x59, 0xa2, 0x7f,
	0x02, 0x18, 0xff, 0x6a, 0x75, 0xae, 0x0a, 0x3c, 0x6c, 0x9f, 0xcb, 0x83, 0xab, 0x27, 0x47, 0x6f,
	0xfb, 0xbe, 0x3e, 0xf0, 0x38, 0x96, 0xc7, 0x57, 0x4c, 0x1c, 0xc0, 0x30, 0xd5, 0xea, 0x52, 0xea,
	0x6b, 0xda, 0x6d, 0xfb, 0x68, 0xc2, 0xcc, 0xef, 0x7d, 0x54, 0x56, 0x30, 0x31, 0x73, 0xb5, 0x46,
	0x66, 0xd8, 0x66, 0xfa, 0xa8, 0xac, 0x60, 0x91, 0x40, 0x7f, 0x59, 0x22, 0x2f, 0x22, 0xde, 0x0e,
	0xf3, 0x66, 0x18, 0x93, 0x1e, 0x12, 0xfb, 0x30, 0xd0, 0x94, 0xe8, 0xb4, 0x4f, 0xa4, 0x5d, 0x26,
	0x9d, 0x50, 0x50, 0x32, 0x88, 0x87, 0x5a, 0x93, 0x2d, 0x90, 0x37, 0x68, 0x1d, 0xfa, 0xc4, 0x47,
	0x65, 0x05, 0x23, 0x73, 0xa1, 0x3c, 0x73, 0xd8, 0x62, 0xfe, 0xa0, 0x98, 0xc9, 0xb0, 0xbf, 0x88,
	0xb1, 0xc8, 0x1c, 0x6d, 0x5c, 0x84, 0xa2, 0xb2, 0x82, 0x93, 0x3f, 0xc3, 0xba, 0xa2, 0xb7, 0x9c,
	0x8e, 0xaa, 0x0b, 0xe1, 0x9b, 0x75, 0xc1, 0x59, 0xae, 0x59, 0xab, 0x0b, 0xce, 0xca, 0x0a, 0xae,
	0xbb, 0xe0, 0x2c, 0x17, 0xae, 0xd5, 0x05, 0x62, 0x7a, 0x83, 0xbb, 0xe0, 0x2c, 0x17, 0xae, 0xd1,
	0x05, 0x67, 0xa5, 0x87, 0xaa, 0x2e, 0x38, 0xcb, 0x35, 0x6b, 0x76, 0xc1, 0x59, 0xc9, 0x60, 0xdd,
	0x05, 0x67, 0x37, 0x2a, 0xf6, 0xc4, 0x47, 0x65, 0x05, 0xd7, 0x5d, 0x70, 0x76, 0x3a, 0x7e, 0xbd,
	0x0b, 0xc8, 0x64, 0xb8, 0xee, 0x82, 0xb3, 0x53, 0x78, 0xbd, 0x0b, 0xfe, 0x22, 0x64, 0x24, 0x0b,
	0x18, 0xf2, 0x30, 0x76, 0x68, 0xd0, 0x3b, 0xd0, 0x3f, 0x57, 0x79, 0xea, 0xa6, 0xc1, 0x5e, 0x78,
	0xd0, 0x97, 0xde, 0xc1, 0x56, 0xbd, 0x50, 0xd9, 0x1c, 0x1d, 0x2a, 0x7d, 0x5f, 0x0e, 0x5f, 0xa8,
	0xec, 0x58, 0xe5, 0x29, 0x42, 0xcb, 0x92, 0xa1, 0xc8, 0x43, 0xcb, 0x92, 0xa0, 0x64, 0xcc, 0x07,
	0x39, 0x9b, 0xdc, 0x83, 0x21, 0x8f, 0x35, 0xea, 0x0c, 0x91, 0x7d, 0xcb, 0xc9, 0x26, 0xa6, 0x2f,
	0x73, 0x22, 0xa1, 0x4f, 0x83, 0xdd, 0xc5, 0x13, 0x1f, 0x36, 0x34, 0x6a, 0x52, 0x57, 0x77, 0x56,
	0x36, 0x5a, 0x2f, 0x20, 0xba, 0x34, 0xce, 0x4f, 0x48, 0x24, 0xc9, 0x4e, 0xce, 0x68, 0x4f, 0x67,
	0xc5, 0x04, 0x02, 0x73, 0x41, 0x3b, 0x8e, 0x64, 0x60, 0x2e, 0xea, 0x33, 0x82, 0x8e, 0x33, 0xc2,
	0xff, 0x3f, 0x23, 0x6a, 0x9c, 0xf1, 0x08, 0xc2, 0x13, 0x55, 0x88, 0x3b, 0x30, 0x5e, 0xaa, 0x2c,
	0x9d, 0x73, 0xea, 0x58, 0xc3, 0x11, 0x06, 0xa8, 0x56, 0x77, 0x60, 0xbc, 0x56, 0x2f, 0xf5, 0x9c,
	0xcf, 0x24, 0x10, 0x03, 0x54, 0xad, 0x4f, 0x60, 0xe0, 0x1f, 0xab, 0xb8, 0x0b, 0xa1, 0x56, 0x05,
	0xad, 0xde, 0x3e, 0x82, 0xc6, 0x08, 0x61, 0xb8, 0xe2, 0x39, 0x7b, 0xc3, 0xeb, 0x75, 0xf1, 0xee,
	0xc1, 0x90, 0x1f, 0x75, 0x67, 0xc9, 0xbf, 0x60, 0xf8, 0xcd, 0xaa, 0x92, 0x3c, 0x82, 0x08, 0x47,
	0xae, 0xb3, 0x2b, 0x1f, 0xb5, 0xba, 0xf2, 0x56, 0x63, 0x42, 0x6f, 0x6a, 0x96, 0x1c, 0xc2, 0x90,
	0x95, 0x43, 0xdc, 0x87, 0x08, 0xa7, 0x96, 0x2f, 0xb8, 0xdd, 0x9c, 0x68, 0x02, 0x92, 0x6f, 0x98,
	0xdb, 0x91, 0x5b, 0xb5, 0xd6, 0x8b, 0x6b, 0xc7, 0x5a, 0x9a, 0x34, 0x92, 0x9b, 0xce, 0x7b, 0x7c,
	0xcc, 0xb0, 0xd7, 0x9f, 0x74, 0xe5, 0x5a, 0x43, 0x9d, 0xae, 0x1c, 0xf5, 0xe2, 0x77, 0x88, 0x9f,
	0x3b, 0x9d, 0xd7, 0x9f, 0x10, 0x94, 0x9e, 0x18, 0xc2, 0x82, 0xdf, 0xca, 0xae, 0x44, 0xb3, 0x7a,
	0x3d, 0xc1, 0xcd, 0xeb, 0xe9, 0xf8, 0x52, 0x23, 0xcb, 0x1a, 0xc7, 0x6f, 0x03, 0xcd, 0xe4, 0xef,
	0xfa, 0xc3, 0xc2, 0xfb, 0x6e, 0xbc, 0xc1, 0xfd, 0x56, 0x3d, 0xff, 0x53, 0xe4, 0x12, 0x88, 0x50,
	0xc5, 0x36, 0xbf, 0x1e, 0xac, 0x70, 0x84, 0x11, 0x27, 0x57, 0xeb, 0x4d, 0x15, 0x64, 0x6d, 0x23,
	0x4c, 0xdc, 0x85, 0x60, 0x59, 0xb2, 0xfa, 0xb5, 0x55, 0x2d, 0x58, 0x96, 0xe2, 0xbe, 0x1f, 0xb2,
	0x41, 0x97, 0x9e, 0x21, 0x82, 0x47, 0xa0, 0x5a, 0x6d, 0x7c, 0x25, 0x2a, 0x25, 0x23, 0x0c, 0x39,
	0xd4, 0xb5, 0x51, 0xa7, 0x86, 0x11, 0xe6, 0x53, 0x35, 0x9b, 0x3a, 0x57, 0xa9, 0x17, 0x61, 0x87,
	0x7f, 0xf5, 0x00, 0x6e, 0xea, 0x20, 0x00, 0x06, 0xcf, 0xb3, 0x0b, 0x93, 0xad, 0xfd, 0xbf, 0x11,
	0xbc, 0xba, 0x47, 0xe3, 0x1e, 0xf9, 0xb9, 0x5a, 0xb3, 0x1f, 0x88, 0x1d, 0x18, 0xcd, 0x4a, 0xf6,
	0x22, 0xb1, 0x0b, 0xe3, 0x13, 0x55, 0xb0, 0x3b, 0x42, 0x32, 0x26, 0xcc, 0x7e, 0x8c, 0x3e, 0x26,
	0xc7, 0xfe, 0x9e, 0xdf, 0xcc, 0x58, 0xf6, 0xbf, 0x3d, 0xfc, 0x1a, 0x06, 0x5e, 0x10, 0xc4, 0x18,
	0xfa, 0xfe, 0xff, 0xcf, 0x96, 0x18, 0x40, 0x70, 0x6a, 0xe2, 0x9e, 0xd8, 0xf6, 0xd3, 0x3b, 0x2b,
	0x55, 0x1c, 0xe0, 0x41, 0x4f, 0x57, 0x2a, 0x5b, 0x60, 0x24, 0x0e, 0x0f, 0xbf, 0x84, 0x51, 0xf5,
	0x2e, 0x30, 0xa3, 0xd3, 0x15, 0x23, 0x5b, 0x78, 0x97, 0xc7, 0x25, 0xd9, 0x3d, 0xb4, 0xbf, 0xcb,
	0xc8, 0x0e, 0x8e, 0x1e, 0xc2, 0xe4, 0xd4, 0xff, 0x95, 0xfc, 0x4d, 0xe7, 0x2f, 0x57, 0xe7, 0x5a,
	0x7c, 0x0e, 0x03, 0x9f, 0x88, 0x88, 0x5b, 0xa3, 0x21, 0xf5, 0xf5, 0x07, 0x1b, 0x11, 0x67, 0xcf,
	0x06, 0x14, 0xf8, 0xea, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xea, 0x6f, 0xfa, 0xa2, 0x91, 0x0a,
	0x00, 0x00,
}
