// Code generated by protoc-gen-go.
// source: utils.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	utils.proto

It has these top-level messages:
	LoginReq
	LoginRsp
	CreateTableReq
	CreateTableRsp
	JoinTableReq
	JoinTableRsp
	OperatReq
	OperatRsp
	DealReq
	DealRsp
	DrawReq
	DrawRsp
	HuReq
	HuRsp
	Eat
	EatReq
	EatRsp
	PongReq
	PongRsp
	Gang
	GangReq
	GangRsp
	DropReq
	DropRsp
	Seat
	UserJoinTableMsg
	Wave
	OperatMsg
	TableOperatReq
	TableOperatRsp
	TableOperatMsg
	PreWinCard
	PosMsg
	Player
	RecvorReq
	RecvorRsp
	GetAreaReq
	GetAreaRsp
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type OperatType int32

const (
	OperatType_Unkonw     OperatType = 0
	OperatType_DealOperat OperatType = 1
	OperatType_DrawOperat OperatType = 2
	OperatType_HuOperat   OperatType = 4
	OperatType_EatOperat  OperatType = 8
	OperatType_PongOperat OperatType = 16
	OperatType_GangOperat OperatType = 32
	OperatType_DropOperat OperatType = 64
)

var OperatType_name = map[int32]string{
	0:  "Unkonw",
	1:  "DealOperat",
	2:  "DrawOperat",
	4:  "HuOperat",
	8:  "EatOperat",
	16: "PongOperat",
	32: "GangOperat",
	64: "DropOperat",
}
var OperatType_value = map[string]int32{
	"Unkonw":     0,
	"DealOperat": 1,
	"DrawOperat": 2,
	"HuOperat":   4,
	"EatOperat":  8,
	"PongOperat": 16,
	"GangOperat": 32,
	"DropOperat": 64,
}

func (x OperatType) String() string {
	return proto1.EnumName(OperatType_name, int32(x))
}
func (OperatType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HuType int32

const (
	HuType_Nomal     HuType = 0
	HuType_Mo        HuType = 1
	HuType_GangHua   HuType = 2
	HuType_QiangGang HuType = 3
	HuType_HaiDiLao  HuType = 4
)

var HuType_name = map[int32]string{
	0: "Nomal",
	1: "Mo",
	2: "GangHua",
	3: "QiangGang",
	4: "HaiDiLao",
}
var HuType_value = map[string]int32{
	"Nomal":     0,
	"Mo":        1,
	"GangHua":   2,
	"QiangGang": 3,
	"HaiDiLao":  4,
}

func (x HuType) String() string {
	return proto1.EnumName(HuType_name, int32(x))
}
func (HuType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GangType int32

const (
	GangType_MingGang    GangType = 0
	GangType_BuGang      GangType = 1
	GangType_AnGang      GangType = 2
	GangType_SpecialGang GangType = 3
)

var GangType_name = map[int32]string{
	0: "MingGang",
	1: "BuGang",
	2: "AnGang",
	3: "SpecialGang",
}
var GangType_value = map[string]int32{
	"MingGang":    0,
	"BuGang":      1,
	"AnGang":      2,
	"SpecialGang": 3,
}

func (x GangType) String() string {
	return proto1.EnumName(GangType_name, int32(x))
}
func (GangType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type TableOperat int32

const (
	TableOperat_TableStart    TableOperat = 0
	TableOperat_TableContinue TableOperat = 1
)

var TableOperat_name = map[int32]string{
	0: "TableStart",
	1: "TableContinue",
}
var TableOperat_value = map[string]int32{
	"TableStart":    0,
	"TableContinue": 1,
}

func (x TableOperat) String() string {
	return proto1.EnumName(TableOperat_name, int32(x))
}
func (TableOperat) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type CreateTableReq_TableType int32

const (
	CreateTableReq_TableRobot CreateTableReq_TableType = 0
	CreateTableReq_TableNomal CreateTableReq_TableType = 1
)

var CreateTableReq_TableType_name = map[int32]string{
	0: "TableRobot",
	1: "TableNomal",
}
var CreateTableReq_TableType_value = map[string]int32{
	"TableRobot": 0,
	"TableNomal": 1,
}

func (x CreateTableReq_TableType) String() string {
	return proto1.EnumName(CreateTableReq_TableType_name, int32(x))
}
func (CreateTableReq_TableType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type Wave_WaveType int32

const (
	Wave_EatWave  Wave_WaveType = 0
	Wave_PongWave Wave_WaveType = 1
	Wave_GangWave Wave_WaveType = 2
)

var Wave_WaveType_name = map[int32]string{
	0: "EatWave",
	1: "PongWave",
	2: "GangWave",
}
var Wave_WaveType_value = map[string]int32{
	"EatWave":  0,
	"PongWave": 1,
	"GangWave": 2,
}

func (x Wave_WaveType) String() string {
	return proto1.EnumName(Wave_WaveType_name, int32(x))
}
func (Wave_WaveType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{26, 0} }

type LoginReq struct {
	Uid    uint64 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Passwd string `protobuf:"bytes,2,opt,name=passwd" json:"passwd,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *LoginReq) Reset()                    { *m = LoginReq{} }
func (m *LoginReq) String() string            { return proto1.CompactTextString(m) }
func (*LoginReq) ProtoMessage()               {}
func (*LoginReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LoginReq) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *LoginReq) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

func (m *LoginReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type LoginRsp struct {
	ErrCode     int32  `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
	ErrMsg      string `protobuf:"bytes,2,opt,name=err_msg,json=errMsg" json:"err_msg,omitempty"`
	NeedRecover bool   `protobuf:"varint,3,opt,name=need_recover,json=needRecover" json:"need_recover,omitempty"`
}

func (m *LoginRsp) Reset()                    { *m = LoginRsp{} }
func (m *LoginRsp) String() string            { return proto1.CompactTextString(m) }
func (*LoginRsp) ProtoMessage()               {}
func (*LoginRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LoginRsp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *LoginRsp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *LoginRsp) GetNeedRecover() bool {
	if m != nil {
		return m.NeedRecover
	}
	return false
}

type CreateTableReq struct {
	Type int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Area int32 `protobuf:"varint,2,opt,name=area" json:"area,omitempty"`
}

func (m *CreateTableReq) Reset()                    { *m = CreateTableReq{} }
func (m *CreateTableReq) String() string            { return proto1.CompactTextString(m) }
func (*CreateTableReq) ProtoMessage()               {}
func (*CreateTableReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateTableReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CreateTableReq) GetArea() int32 {
	if m != nil {
		return m.Area
	}
	return 0
}

type CreateTableRsp struct {
	ErrCode int32  `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
	ErrMsg  string `protobuf:"bytes,2,opt,name=err_msg,json=errMsg" json:"err_msg,omitempty"`
	TableId uint32 `protobuf:"varint,3,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
}

func (m *CreateTableRsp) Reset()                    { *m = CreateTableRsp{} }
func (m *CreateTableRsp) String() string            { return proto1.CompactTextString(m) }
func (*CreateTableRsp) ProtoMessage()               {}
func (*CreateTableRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateTableRsp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *CreateTableRsp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CreateTableRsp) GetTableId() uint32 {
	if m != nil {
		return m.TableId
	}
	return 0
}

type JoinTableReq struct {
	TableId uint32 `protobuf:"varint,2,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
}

func (m *JoinTableReq) Reset()                    { *m = JoinTableReq{} }
func (m *JoinTableReq) String() string            { return proto1.CompactTextString(m) }
func (*JoinTableReq) ProtoMessage()               {}
func (*JoinTableReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *JoinTableReq) GetTableId() uint32 {
	if m != nil {
		return m.TableId
	}
	return 0
}

type JoinTableRsp struct {
	ErrCode int32  `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
	ErrMsg  string `protobuf:"bytes,2,opt,name=err_msg,json=errMsg" json:"err_msg,omitempty"`
	Pos     int32  `protobuf:"varint,3,opt,name=pos" json:"pos,omitempty"`
}

func (m *JoinTableRsp) Reset()                    { *m = JoinTableRsp{} }
func (m *JoinTableRsp) String() string            { return proto1.CompactTextString(m) }
func (*JoinTableRsp) ProtoMessage()               {}
func (*JoinTableRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *JoinTableRsp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *JoinTableRsp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *JoinTableRsp) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

type OperatReq struct {
	Type    OperatType `protobuf:"varint,1,opt,name=type,enum=proto.OperatType" json:"type,omitempty"`
	DealReq *DealReq   `protobuf:"bytes,2,opt,name=dealReq" json:"dealReq,omitempty"`
	DrawReq *DrawReq   `protobuf:"bytes,3,opt,name=drawReq" json:"drawReq,omitempty"`
	HuReq   *HuReq     `protobuf:"bytes,4,opt,name=huReq" json:"huReq,omitempty"`
	EatReq  *EatReq    `protobuf:"bytes,5,opt,name=eatReq" json:"eatReq,omitempty"`
	PongReq *PongReq   `protobuf:"bytes,6,opt,name=pongReq" json:"pongReq,omitempty"`
	GangReq *GangReq   `protobuf:"bytes,7,opt,name=gangReq" json:"gangReq,omitempty"`
	DropReq *DropReq   `protobuf:"bytes,8,opt,name=dropReq" json:"dropReq,omitempty"`
}

func (m *OperatReq) Reset()                    { *m = OperatReq{} }
func (m *OperatReq) String() string            { return proto1.CompactTextString(m) }
func (*OperatReq) ProtoMessage()               {}
func (*OperatReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *OperatReq) GetType() OperatType {
	if m != nil {
		return m.Type
	}
	return OperatType_Unkonw
}

func (m *OperatReq) GetDealReq() *DealReq {
	if m != nil {
		return m.DealReq
	}
	return nil
}

func (m *OperatReq) GetDrawReq() *DrawReq {
	if m != nil {
		return m.DrawReq
	}
	return nil
}

func (m *OperatReq) GetHuReq() *HuReq {
	if m != nil {
		return m.HuReq
	}
	return nil
}

func (m *OperatReq) GetEatReq() *EatReq {
	if m != nil {
		return m.EatReq
	}
	return nil
}

func (m *OperatReq) GetPongReq() *PongReq {
	if m != nil {
		return m.PongReq
	}
	return nil
}

func (m *OperatReq) GetGangReq() *GangReq {
	if m != nil {
		return m.GangReq
	}
	return nil
}

func (m *OperatReq) GetDropReq() *DropReq {
	if m != nil {
		return m.DropReq
	}
	return nil
}

type OperatRsp struct {
	ErrCode int32      `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
	ErrMsg  string     `protobuf:"bytes,2,opt,name=err_msg,json=errMsg" json:"err_msg,omitempty"`
	Type    OperatType `protobuf:"varint,3,opt,name=type,enum=proto.OperatType" json:"type,omitempty"`
	DealRsp *DealRsp   `protobuf:"bytes,4,opt,name=dealRsp" json:"dealRsp,omitempty"`
	DrawRsp *DrawRsp   `protobuf:"bytes,5,opt,name=drawRsp" json:"drawRsp,omitempty"`
	HuRsp   *HuRsp     `protobuf:"bytes,6,opt,name=huRsp" json:"huRsp,omitempty"`
	EatRsp  *EatRsp    `protobuf:"bytes,7,opt,name=eatRsp" json:"eatRsp,omitempty"`
	PongRsp *PongRsp   `protobuf:"bytes,8,opt,name=pongRsp" json:"pongRsp,omitempty"`
	GangRsp *GangRsp   `protobuf:"bytes,9,opt,name=gangRsp" json:"gangRsp,omitempty"`
	DropRsp *DropRsp   `protobuf:"bytes,10,opt,name=dropRsp" json:"dropRsp,omitempty"`
}

func (m *OperatRsp) Reset()                    { *m = OperatRsp{} }
func (m *OperatRsp) String() string            { return proto1.CompactTextString(m) }
func (*OperatRsp) ProtoMessage()               {}
func (*OperatRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *OperatRsp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *OperatRsp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *OperatRsp) GetType() OperatType {
	if m != nil {
		return m.Type
	}
	return OperatType_Unkonw
}

func (m *OperatRsp) GetDealRsp() *DealRsp {
	if m != nil {
		return m.DealRsp
	}
	return nil
}

func (m *OperatRsp) GetDrawRsp() *DrawRsp {
	if m != nil {
		return m.DrawRsp
	}
	return nil
}

func (m *OperatRsp) GetHuRsp() *HuRsp {
	if m != nil {
		return m.HuRsp
	}
	return nil
}

func (m *OperatRsp) GetEatRsp() *EatRsp {
	if m != nil {
		return m.EatRsp
	}
	return nil
}

func (m *OperatRsp) GetPongRsp() *PongRsp {
	if m != nil {
		return m.PongRsp
	}
	return nil
}

func (m *OperatRsp) GetGangRsp() *GangRsp {
	if m != nil {
		return m.GangRsp
	}
	return nil
}

func (m *OperatRsp) GetDropRsp() *DropRsp {
	if m != nil {
		return m.DropRsp
	}
	return nil
}

type DealReq struct {
	Uid     uint64  `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Cards   []int32 `protobuf:"varint,2,rep,packed,name=cards" json:"cards,omitempty"`
	FanCard int32   `protobuf:"varint,3,opt,name=fan_card,json=fanCard" json:"fan_card,omitempty"`
	HunCard int32   `protobuf:"varint,4,opt,name=hun_card,json=hunCard" json:"hun_card,omitempty"`
}

func (m *DealReq) Reset()                    { *m = DealReq{} }
func (m *DealReq) String() string            { return proto1.CompactTextString(m) }
func (*DealReq) ProtoMessage()               {}
func (*DealReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DealReq) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *DealReq) GetCards() []int32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *DealReq) GetFanCard() int32 {
	if m != nil {
		return m.FanCard
	}
	return 0
}

func (m *DealReq) GetHunCard() int32 {
	if m != nil {
		return m.HunCard
	}
	return 0
}

type DealRsp struct {
}

func (m *DealRsp) Reset()                    { *m = DealRsp{} }
func (m *DealRsp) String() string            { return proto1.CompactTextString(m) }
func (*DealRsp) ProtoMessage()               {}
func (*DealRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type DrawReq struct {
	Card int32 `protobuf:"varint,1,opt,name=card" json:"card,omitempty"`
}

func (m *DrawReq) Reset()                    { *m = DrawReq{} }
func (m *DrawReq) String() string            { return proto1.CompactTextString(m) }
func (*DrawReq) ProtoMessage()               {}
func (*DrawReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DrawReq) GetCard() int32 {
	if m != nil {
		return m.Card
	}
	return 0
}

type DrawRsp struct {
}

func (m *DrawRsp) Reset()                    { *m = DrawRsp{} }
func (m *DrawRsp) String() string            { return proto1.CompactTextString(m) }
func (*DrawRsp) ProtoMessage()               {}
func (*DrawRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type HuReq struct {
	Card int32  `protobuf:"varint,1,opt,name=card" json:"card,omitempty"`
	Type HuType `protobuf:"varint,2,opt,name=type,enum=proto.HuType" json:"type,omitempty"`
	Lose uint64 `protobuf:"varint,3,opt,name=lose" json:"lose,omitempty"`
}

func (m *HuReq) Reset()                    { *m = HuReq{} }
func (m *HuReq) String() string            { return proto1.CompactTextString(m) }
func (*HuReq) ProtoMessage()               {}
func (*HuReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *HuReq) GetCard() int32 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *HuReq) GetType() HuType {
	if m != nil {
		return m.Type
	}
	return HuType_Nomal
}

func (m *HuReq) GetLose() uint64 {
	if m != nil {
		return m.Lose
	}
	return 0
}

type HuRsp struct {
	Ok   bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Card int32  `protobuf:"varint,2,opt,name=card" json:"card,omitempty"`
	Type HuType `protobuf:"varint,3,opt,name=type,enum=proto.HuType" json:"type,omitempty"`
	Lose uint64 `protobuf:"varint,4,opt,name=lose" json:"lose,omitempty"`
}

func (m *HuRsp) Reset()                    { *m = HuRsp{} }
func (m *HuRsp) String() string            { return proto1.CompactTextString(m) }
func (*HuRsp) ProtoMessage()               {}
func (*HuRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *HuRsp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *HuRsp) GetCard() int32 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *HuRsp) GetType() HuType {
	if m != nil {
		return m.Type
	}
	return HuType_Nomal
}

func (m *HuRsp) GetLose() uint64 {
	if m != nil {
		return m.Lose
	}
	return 0
}

type Eat struct {
	HandCard []int32 `protobuf:"varint,1,rep,packed,name=hand_card,json=handCard" json:"hand_card,omitempty"`
	WaveCard []int32 `protobuf:"varint,2,rep,packed,name=wave_card,json=waveCard" json:"wave_card,omitempty"`
}

func (m *Eat) Reset()                    { *m = Eat{} }
func (m *Eat) String() string            { return proto1.CompactTextString(m) }
func (*Eat) ProtoMessage()               {}
func (*Eat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Eat) GetHandCard() []int32 {
	if m != nil {
		return m.HandCard
	}
	return nil
}

func (m *Eat) GetWaveCard() []int32 {
	if m != nil {
		return m.WaveCard
	}
	return nil
}

type EatReq struct {
	Eat []*Eat `protobuf:"bytes,1,rep,name=eat" json:"eat,omitempty"`
}

func (m *EatReq) Reset()                    { *m = EatReq{} }
func (m *EatReq) String() string            { return proto1.CompactTextString(m) }
func (*EatReq) ProtoMessage()               {}
func (*EatReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *EatReq) GetEat() []*Eat {
	if m != nil {
		return m.Eat
	}
	return nil
}

type EatRsp struct {
	Ok  bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Eat *Eat `protobuf:"bytes,2,opt,name=eat" json:"eat,omitempty"`
}

func (m *EatRsp) Reset()                    { *m = EatRsp{} }
func (m *EatRsp) String() string            { return proto1.CompactTextString(m) }
func (*EatRsp) ProtoMessage()               {}
func (*EatRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *EatRsp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *EatRsp) GetEat() *Eat {
	if m != nil {
		return m.Eat
	}
	return nil
}

type PongReq struct {
	Card int32 `protobuf:"varint,1,opt,name=card" json:"card,omitempty"`
}

func (m *PongReq) Reset()                    { *m = PongReq{} }
func (m *PongReq) String() string            { return proto1.CompactTextString(m) }
func (*PongReq) ProtoMessage()               {}
func (*PongReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *PongReq) GetCard() int32 {
	if m != nil {
		return m.Card
	}
	return 0
}

type PongRsp struct {
	Ok   bool  `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Card int32 `protobuf:"varint,2,opt,name=card" json:"card,omitempty"`
}

func (m *PongRsp) Reset()                    { *m = PongRsp{} }
func (m *PongRsp) String() string            { return proto1.CompactTextString(m) }
func (*PongRsp) ProtoMessage()               {}
func (*PongRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *PongRsp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *PongRsp) GetCard() int32 {
	if m != nil {
		return m.Card
	}
	return 0
}

type Gang struct {
	Cards []int32  `protobuf:"varint,1,rep,packed,name=cards" json:"cards,omitempty"`
	Type  GangType `protobuf:"varint,2,opt,name=type,enum=proto.GangType" json:"type,omitempty"`
}

func (m *Gang) Reset()                    { *m = Gang{} }
func (m *Gang) String() string            { return proto1.CompactTextString(m) }
func (*Gang) ProtoMessage()               {}
func (*Gang) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Gang) GetCards() []int32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *Gang) GetType() GangType {
	if m != nil {
		return m.Type
	}
	return GangType_MingGang
}

type GangReq struct {
	Gang []*Gang `protobuf:"bytes,1,rep,name=gang" json:"gang,omitempty"`
}

func (m *GangReq) Reset()                    { *m = GangReq{} }
func (m *GangReq) String() string            { return proto1.CompactTextString(m) }
func (*GangReq) ProtoMessage()               {}
func (*GangReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *GangReq) GetGang() []*Gang {
	if m != nil {
		return m.Gang
	}
	return nil
}

type GangRsp struct {
	Ok   bool  `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Gang *Gang `protobuf:"bytes,2,opt,name=gang" json:"gang,omitempty"`
}

func (m *GangRsp) Reset()                    { *m = GangRsp{} }
func (m *GangRsp) String() string            { return proto1.CompactTextString(m) }
func (*GangRsp) ProtoMessage()               {}
func (*GangRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *GangRsp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *GangRsp) GetGang() *Gang {
	if m != nil {
		return m.Gang
	}
	return nil
}

type DropReq struct {
	Card int32 `protobuf:"varint,2,opt,name=card" json:"card,omitempty"`
}

func (m *DropReq) Reset()                    { *m = DropReq{} }
func (m *DropReq) String() string            { return proto1.CompactTextString(m) }
func (*DropReq) ProtoMessage()               {}
func (*DropReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *DropReq) GetCard() int32 {
	if m != nil {
		return m.Card
	}
	return 0
}

type DropRsp struct {
	DisCard int32 `protobuf:"varint,3,opt,name=dis_card,json=disCard" json:"dis_card,omitempty"`
}

func (m *DropRsp) Reset()                    { *m = DropRsp{} }
func (m *DropRsp) String() string            { return proto1.CompactTextString(m) }
func (*DropRsp) ProtoMessage()               {}
func (*DropRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *DropRsp) GetDisCard() int32 {
	if m != nil {
		return m.DisCard
	}
	return 0
}

type Seat struct {
	Uid  uint64 `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Pos  int32  `protobuf:"varint,4,opt,name=pos" json:"pos,omitempty"`
}

func (m *Seat) Reset()                    { *m = Seat{} }
func (m *Seat) String() string            { return proto1.CompactTextString(m) }
func (*Seat) ProtoMessage()               {}
func (*Seat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *Seat) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *Seat) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Seat) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

type UserJoinTableMsg struct {
	Tid   uint32  `protobuf:"varint,1,opt,name=tid" json:"tid,omitempty"`
	Seats []*Seat `protobuf:"bytes,2,rep,name=seats" json:"seats,omitempty"`
}

func (m *UserJoinTableMsg) Reset()                    { *m = UserJoinTableMsg{} }
func (m *UserJoinTableMsg) String() string            { return proto1.CompactTextString(m) }
func (*UserJoinTableMsg) ProtoMessage()               {}
func (*UserJoinTableMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *UserJoinTableMsg) GetTid() uint32 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *UserJoinTableMsg) GetSeats() []*Seat {
	if m != nil {
		return m.Seats
	}
	return nil
}

type Wave struct {
	Cards    []int32       `protobuf:"varint,1,rep,packed,name=cards" json:"cards,omitempty"`
	WaveType Wave_WaveType `protobuf:"varint,2,opt,name=wave_type,json=waveType,enum=proto.Wave_WaveType" json:"wave_type,omitempty"`
	GangType GangType      `protobuf:"varint,3,opt,name=gang_type,json=gangType,enum=proto.GangType" json:"gang_type,omitempty"`
}

func (m *Wave) Reset()                    { *m = Wave{} }
func (m *Wave) String() string            { return proto1.CompactTextString(m) }
func (*Wave) ProtoMessage()               {}
func (*Wave) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *Wave) GetCards() []int32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *Wave) GetWaveType() Wave_WaveType {
	if m != nil {
		return m.WaveType
	}
	return Wave_EatWave
}

func (m *Wave) GetGangType() GangType {
	if m != nil {
		return m.GangType
	}
	return GangType_MingGang
}

type OperatMsg struct {
	Uid  uint64     `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Type OperatType `protobuf:"varint,2,opt,name=type,enum=proto.OperatType" json:"type,omitempty"`
	Deal *DealRsp   `protobuf:"bytes,3,opt,name=deal" json:"deal,omitempty"`
	Draw *DrawRsp   `protobuf:"bytes,4,opt,name=draw" json:"draw,omitempty"`
	Hu   *HuRsp     `protobuf:"bytes,5,opt,name=hu" json:"hu,omitempty"`
	Eat  *EatRsp    `protobuf:"bytes,6,opt,name=eat" json:"eat,omitempty"`
	Pong *PongRsp   `protobuf:"bytes,7,opt,name=pong" json:"pong,omitempty"`
	Gang *GangRsp   `protobuf:"bytes,8,opt,name=gang" json:"gang,omitempty"`
	Drop *DropRsp   `protobuf:"bytes,9,opt,name=drop" json:"drop,omitempty"`
}

func (m *OperatMsg) Reset()                    { *m = OperatMsg{} }
func (m *OperatMsg) String() string            { return proto1.CompactTextString(m) }
func (*OperatMsg) ProtoMessage()               {}
func (*OperatMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *OperatMsg) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *OperatMsg) GetType() OperatType {
	if m != nil {
		return m.Type
	}
	return OperatType_Unkonw
}

func (m *OperatMsg) GetDeal() *DealRsp {
	if m != nil {
		return m.Deal
	}
	return nil
}

func (m *OperatMsg) GetDraw() *DrawRsp {
	if m != nil {
		return m.Draw
	}
	return nil
}

func (m *OperatMsg) GetHu() *HuRsp {
	if m != nil {
		return m.Hu
	}
	return nil
}

func (m *OperatMsg) GetEat() *EatRsp {
	if m != nil {
		return m.Eat
	}
	return nil
}

func (m *OperatMsg) GetPong() *PongRsp {
	if m != nil {
		return m.Pong
	}
	return nil
}

func (m *OperatMsg) GetGang() *GangRsp {
	if m != nil {
		return m.Gang
	}
	return nil
}

func (m *OperatMsg) GetDrop() *DropRsp {
	if m != nil {
		return m.Drop
	}
	return nil
}

type TableOperatReq struct {
	Type TableOperat `protobuf:"varint,1,opt,name=type,enum=proto.TableOperat" json:"type,omitempty"`
}

func (m *TableOperatReq) Reset()                    { *m = TableOperatReq{} }
func (m *TableOperatReq) String() string            { return proto1.CompactTextString(m) }
func (*TableOperatReq) ProtoMessage()               {}
func (*TableOperatReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *TableOperatReq) GetType() TableOperat {
	if m != nil {
		return m.Type
	}
	return TableOperat_TableStart
}

type TableOperatRsp struct {
	Type TableOperat `protobuf:"varint,1,opt,name=Type,enum=proto.TableOperat" json:"Type,omitempty"`
	Ok   bool        `protobuf:"varint,2,opt,name=ok" json:"ok,omitempty"`
}

func (m *TableOperatRsp) Reset()                    { *m = TableOperatRsp{} }
func (m *TableOperatRsp) String() string            { return proto1.CompactTextString(m) }
func (*TableOperatRsp) ProtoMessage()               {}
func (*TableOperatRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *TableOperatRsp) GetType() TableOperat {
	if m != nil {
		return m.Type
	}
	return TableOperat_TableStart
}

func (m *TableOperatRsp) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type TableOperatMsg struct {
	Uid  uint64      `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Type TableOperat `protobuf:"varint,2,opt,name=type,enum=proto.TableOperat" json:"type,omitempty"`
	OK   bool        `protobuf:"varint,3,opt,name=OK" json:"OK,omitempty"`
}

func (m *TableOperatMsg) Reset()                    { *m = TableOperatMsg{} }
func (m *TableOperatMsg) String() string            { return proto1.CompactTextString(m) }
func (*TableOperatMsg) ProtoMessage()               {}
func (*TableOperatMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *TableOperatMsg) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *TableOperatMsg) GetType() TableOperat {
	if m != nil {
		return m.Type
	}
	return TableOperat_TableStart
}

func (m *TableOperatMsg) GetOK() bool {
	if m != nil {
		return m.OK
	}
	return false
}

type PreWinCard struct {
	Card int32  `protobuf:"varint,1,opt,name=card" json:"card,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *PreWinCard) Reset()                    { *m = PreWinCard{} }
func (m *PreWinCard) String() string            { return proto1.CompactTextString(m) }
func (*PreWinCard) ProtoMessage()               {}
func (*PreWinCard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *PreWinCard) GetCard() int32 {
	if m != nil {
		return m.Card
	}
	return 0
}

func (m *PreWinCard) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type PosMsg struct {
	Uid uint64 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Pos int32  `protobuf:"varint,2,opt,name=pos" json:"pos,omitempty"`
}

func (m *PosMsg) Reset()                    { *m = PosMsg{} }
func (m *PosMsg) String() string            { return proto1.CompactTextString(m) }
func (*PosMsg) ProtoMessage()               {}
func (*PosMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *PosMsg) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *PosMsg) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

type Player struct {
	Uid         uint64                `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	Cards       []int32               `protobuf:"varint,2,rep,packed,name=cards" json:"cards,omitempty"`
	Waves       []*Wave               `protobuf:"bytes,3,rep,name=waves" json:"waves,omitempty"`
	DropCards   []int32               `protobuf:"varint,4,rep,packed,name=drop_cards,json=dropCards" json:"drop_cards,omitempty"`
	PrewinCards map[int32]*PreWinCard `protobuf:"bytes,5,rep,name=prewin_cards,json=prewinCards" json:"prewin_cards,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Pos         []*PosMsg             `protobuf:"bytes,6,rep,name=pos" json:"pos,omitempty"`
	HunCard     int32                 `protobuf:"varint,7,opt,name=hun_card,json=hunCard" json:"hun_card,omitempty"`
	CancelHu    bool                  `protobuf:"varint,8,opt,name=cancel_hu,json=cancelHu" json:"cancel_hu,omitempty"`
}

func (m *Player) Reset()                    { *m = Player{} }
func (m *Player) String() string            { return proto1.CompactTextString(m) }
func (*Player) ProtoMessage()               {}
func (*Player) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *Player) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *Player) GetCards() []int32 {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *Player) GetWaves() []*Wave {
	if m != nil {
		return m.Waves
	}
	return nil
}

func (m *Player) GetDropCards() []int32 {
	if m != nil {
		return m.DropCards
	}
	return nil
}

func (m *Player) GetPrewinCards() map[int32]*PreWinCard {
	if m != nil {
		return m.PrewinCards
	}
	return nil
}

func (m *Player) GetPos() []*PosMsg {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *Player) GetHunCard() int32 {
	if m != nil {
		return m.HunCard
	}
	return 0
}

func (m *Player) GetCancelHu() bool {
	if m != nil {
		return m.CancelHu
	}
	return false
}

type RecvorReq struct {
}

func (m *RecvorReq) Reset()                    { *m = RecvorReq{} }
func (m *RecvorReq) String() string            { return proto1.CompactTextString(m) }
func (*RecvorReq) ProtoMessage()               {}
func (*RecvorReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

type RecvorRsp struct {
	ErrCode uint32    `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
	ErrMsg  string    `protobuf:"bytes,2,opt,name=err_msg,json=errMsg" json:"err_msg,omitempty"`
	Players []*Player `protobuf:"bytes,3,rep,name=players" json:"players,omitempty"`
}

func (m *RecvorRsp) Reset()                    { *m = RecvorRsp{} }
func (m *RecvorRsp) String() string            { return proto1.CompactTextString(m) }
func (*RecvorRsp) ProtoMessage()               {}
func (*RecvorRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *RecvorRsp) GetErrCode() uint32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *RecvorRsp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *RecvorRsp) GetPlayers() []*Player {
	if m != nil {
		return m.Players
	}
	return nil
}

type GetAreaReq struct {
}

func (m *GetAreaReq) Reset()                    { *m = GetAreaReq{} }
func (m *GetAreaReq) String() string            { return proto1.CompactTextString(m) }
func (*GetAreaReq) ProtoMessage()               {}
func (*GetAreaReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

type GetAreaRsp struct {
	ErrCode  int32  `protobuf:"varint,1,opt,name=err_code,json=errCode" json:"err_code,omitempty"`
	ErrMsg   string `protobuf:"bytes,2,opt,name=err_msg,json=errMsg" json:"err_msg,omitempty"`
	AreaId   int32  `protobuf:"varint,3,opt,name=area_id,json=areaId" json:"area_id,omitempty"`
	AreaName string `protobuf:"bytes,4,opt,name=area_name,json=areaName" json:"area_name,omitempty"`
}

func (m *GetAreaRsp) Reset()                    { *m = GetAreaRsp{} }
func (m *GetAreaRsp) String() string            { return proto1.CompactTextString(m) }
func (*GetAreaRsp) ProtoMessage()               {}
func (*GetAreaRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *GetAreaRsp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *GetAreaRsp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *GetAreaRsp) GetAreaId() int32 {
	if m != nil {
		return m.AreaId
	}
	return 0
}

func (m *GetAreaRsp) GetAreaName() string {
	if m != nil {
		return m.AreaName
	}
	return ""
}

func init() {
	proto1.RegisterType((*LoginReq)(nil), "proto.LoginReq")
	proto1.RegisterType((*LoginRsp)(nil), "proto.LoginRsp")
	proto1.RegisterType((*CreateTableReq)(nil), "proto.CreateTableReq")
	proto1.RegisterType((*CreateTableRsp)(nil), "proto.CreateTableRsp")
	proto1.RegisterType((*JoinTableReq)(nil), "proto.JoinTableReq")
	proto1.RegisterType((*JoinTableRsp)(nil), "proto.JoinTableRsp")
	proto1.RegisterType((*OperatReq)(nil), "proto.OperatReq")
	proto1.RegisterType((*OperatRsp)(nil), "proto.OperatRsp")
	proto1.RegisterType((*DealReq)(nil), "proto.DealReq")
	proto1.RegisterType((*DealRsp)(nil), "proto.DealRsp")
	proto1.RegisterType((*DrawReq)(nil), "proto.DrawReq")
	proto1.RegisterType((*DrawRsp)(nil), "proto.DrawRsp")
	proto1.RegisterType((*HuReq)(nil), "proto.HuReq")
	proto1.RegisterType((*HuRsp)(nil), "proto.HuRsp")
	proto1.RegisterType((*Eat)(nil), "proto.Eat")
	proto1.RegisterType((*EatReq)(nil), "proto.EatReq")
	proto1.RegisterType((*EatRsp)(nil), "proto.EatRsp")
	proto1.RegisterType((*PongReq)(nil), "proto.PongReq")
	proto1.RegisterType((*PongRsp)(nil), "proto.PongRsp")
	proto1.RegisterType((*Gang)(nil), "proto.Gang")
	proto1.RegisterType((*GangReq)(nil), "proto.GangReq")
	proto1.RegisterType((*GangRsp)(nil), "proto.GangRsp")
	proto1.RegisterType((*DropReq)(nil), "proto.DropReq")
	proto1.RegisterType((*DropRsp)(nil), "proto.DropRsp")
	proto1.RegisterType((*Seat)(nil), "proto.Seat")
	proto1.RegisterType((*UserJoinTableMsg)(nil), "proto.UserJoinTableMsg")
	proto1.RegisterType((*Wave)(nil), "proto.Wave")
	proto1.RegisterType((*OperatMsg)(nil), "proto.OperatMsg")
	proto1.RegisterType((*TableOperatReq)(nil), "proto.TableOperatReq")
	proto1.RegisterType((*TableOperatRsp)(nil), "proto.TableOperatRsp")
	proto1.RegisterType((*TableOperatMsg)(nil), "proto.TableOperatMsg")
	proto1.RegisterType((*PreWinCard)(nil), "proto.PreWinCard")
	proto1.RegisterType((*PosMsg)(nil), "proto.PosMsg")
	proto1.RegisterType((*Player)(nil), "proto.Player")
	proto1.RegisterType((*RecvorReq)(nil), "proto.RecvorReq")
	proto1.RegisterType((*RecvorRsp)(nil), "proto.RecvorRsp")
	proto1.RegisterType((*GetAreaReq)(nil), "proto.GetAreaReq")
	proto1.RegisterType((*GetAreaRsp)(nil), "proto.GetAreaRsp")
	proto1.RegisterEnum("proto.OperatType", OperatType_name, OperatType_value)
	proto1.RegisterEnum("proto.HuType", HuType_name, HuType_value)
	proto1.RegisterEnum("proto.GangType", GangType_name, GangType_value)
	proto1.RegisterEnum("proto.TableOperat", TableOperat_name, TableOperat_value)
	proto1.RegisterEnum("proto.CreateTableReq_TableType", CreateTableReq_TableType_name, CreateTableReq_TableType_value)
	proto1.RegisterEnum("proto.Wave_WaveType", Wave_WaveType_name, Wave_WaveType_value)
}

func init() { proto1.RegisterFile("utils.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1463 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xdd, 0x6e, 0xdb, 0xc6,
	0x12, 0xb6, 0x28, 0x52, 0xa2, 0x46, 0x96, 0xc3, 0x2c, 0x82, 0x13, 0xe5, 0x24, 0x39, 0xb1, 0x79,
	0x9a, 0xc4, 0x75, 0xd3, 0xa0, 0x4d, 0x8a, 0x22, 0xc8, 0x45, 0x5b, 0xd7, 0x31, 0xe2, 0x34, 0x7f,
	0xce, 0xc6, 0x41, 0x80, 0xde, 0x08, 0x6b, 0x69, 0x23, 0xb1, 0x96, 0x49, 0x86, 0xa4, 0x2c, 0xf8,
	0xba, 0xe8, 0x0b, 0xf5, 0xa6, 0x8f, 0xd1, 0x67, 0xe8, 0x9b, 0x14, 0x33, 0x3b, 0xa4, 0x48, 0x99,
	0x41, 0x0c, 0xdf, 0x48, 0x3b, 0x33, 0xdf, 0xcc, 0xee, 0xfc, 0xee, 0x12, 0x7a, 0xc7, 0x6a, 0xf2,
	0x5b, 0x14, 0x8e, 0xef, 0xc7, 0x49, 0x94, 0x45, 0xc2, 0xa1, 0x3f, 0x7f, 0x0f, 0xdc, 0x17, 0xd1,
	0x38, 0x08, 0xa5, 0xfe, 0x28, 0x3c, 0x68, 0xce, 0x82, 0x51, 0xbf, 0xb1, 0xde, 0xd8, 0xb4, 0x25,
	0x2e, 0xc5, 0x7f, 0xa0, 0x15, 0xab, 0x34, 0x9d, 0x8f, 0xfa, 0xd6, 0x7a, 0x63, 0xb3, 0x23, 0x99,
	0x12, 0x02, 0xec, 0x50, 0x1d, 0xeb, 0x7e, 0x93, 0xb8, 0xb4, 0xf6, 0x55, 0x6e, 0x29, 0x8d, 0xc5,
	0x35, 0x70, 0x75, 0x92, 0x0c, 0x86, 0xd1, 0x48, 0x93, 0x39, 0x47, 0xb6, 0x75, 0x92, 0xec, 0x44,
	0x23, 0x2d, 0xae, 0x02, 0x2e, 0x07, 0xc7, 0xe9, 0x38, 0xb7, 0xa9, 0x93, 0xe4, 0x65, 0x3a, 0x16,
	0x1b, 0xb0, 0x1a, 0x6a, 0x3d, 0x1a, 0x24, 0x7a, 0x18, 0x9d, 0xe8, 0x84, 0x6c, 0xbb, 0xb2, 0x8b,
	0x3c, 0x69, 0x58, 0xbe, 0x86, 0xb5, 0x9d, 0x44, 0xab, 0x4c, 0x1f, 0xa8, 0xc3, 0xa9, 0xc6, 0x23,
	0x0b, 0xb0, 0xb3, 0xd3, 0x38, 0xdf, 0x84, 0xd6, 0xc8, 0x53, 0x89, 0x56, 0x64, 0xde, 0x91, 0xb4,
	0xf6, 0xbf, 0x82, 0x0e, 0xe9, 0x1c, 0x20, 0x60, 0x0d, 0xc0, 0x18, 0x88, 0x0e, 0xa3, 0xcc, 0x5b,
	0x29, 0xe8, 0x57, 0xd1, 0xb1, 0x9a, 0x7a, 0x0d, 0x7f, 0x50, 0xdd, 0xe6, 0x82, 0xfe, 0x5c, 0x03,
	0x37, 0x43, 0xfd, 0x41, 0x30, 0x22, 0x5f, 0x7a, 0xb2, 0x4d, 0xf4, 0xb3, 0x91, 0xff, 0x25, 0xac,
	0xfe, 0x12, 0x05, 0x61, 0xe1, 0x45, 0x19, 0x6a, 0x55, 0xa1, 0x07, 0x65, 0xe8, 0x05, 0x4f, 0xe2,
	0x41, 0x33, 0x8e, 0x52, 0x3a, 0x84, 0x23, 0x71, 0xe9, 0xff, 0x6d, 0x41, 0xe7, 0x75, 0xac, 0x13,
	0x95, 0xe1, 0xf6, 0xb7, 0x4b, 0x41, 0x5c, 0x7b, 0x70, 0xd9, 0x14, 0xc8, 0x7d, 0x23, 0xc7, 0x80,
	0x71, 0x5c, 0x37, 0xa1, 0x3d, 0xd2, 0x6a, 0x2a, 0xf5, 0x47, 0xb2, 0xdf, 0x7d, 0xb0, 0xc6, 0xc8,
	0x27, 0x86, 0x2b, 0x73, 0x31, 0x21, 0x13, 0x35, 0x47, 0x64, 0xb3, 0x8a, 0x34, 0x5c, 0x99, 0x8b,
	0x85, 0x0f, 0xce, 0x64, 0x86, 0x38, 0x9b, 0x70, 0xab, 0x8c, 0xdb, 0x43, 0x9e, 0x34, 0x22, 0x71,
	0x1b, 0x5a, 0x9a, 0x0e, 0xda, 0x77, 0x08, 0xd4, 0x63, 0xd0, 0x2e, 0x31, 0x25, 0x0b, 0x71, 0xd3,
	0x38, 0x0a, 0xc7, 0x88, 0x6b, 0x55, 0x36, 0xdd, 0x37, 0x5c, 0x99, 0x8b, 0x11, 0x39, 0x56, 0x06,
	0xd9, 0xae, 0x20, 0x9f, 0x2a, 0x46, 0xb2, 0xd8, 0x38, 0x12, 0xc5, 0x88, 0x74, 0x97, 0x1c, 0x21,
	0xae, 0xcc, 0xc5, 0xfe, 0xef, 0xcd, 0x22, 0xa2, 0x17, 0xcc, 0x52, 0x9e, 0x85, 0xe6, 0xf9, 0xb2,
	0x90, 0xc6, 0x1c, 0xb3, 0x4a, 0x16, 0xd2, 0x58, 0xe6, 0xe2, 0x22, 0x0b, 0x69, 0xcc, 0x81, 0xab,
	0x64, 0x81, 0x90, 0x66, 0xc1, 0x59, 0x48, 0x63, 0x0e, 0x5c, 0x29, 0x0b, 0x69, 0x2c, 0x8d, 0x28,
	0xcf, 0x42, 0x1a, 0x73, 0xcc, 0xca, 0x59, 0x48, 0x63, 0xc9, 0xc2, 0x22, 0x0b, 0x69, 0xbc, 0x14,
	0xb1, 0x7d, 0xc3, 0x95, 0xb9, 0xb8, 0xc8, 0x42, 0x1a, 0xf7, 0x3b, 0x67, 0xb3, 0x80, 0x48, 0x16,
	0x17, 0x59, 0x48, 0xe3, 0x3e, 0x9c, 0xcd, 0x82, 0x71, 0x84, 0x16, 0xfe, 0x18, 0xda, 0x5c, 0x8c,
	0x35, 0xc3, 0xec, 0x0a, 0x38, 0x43, 0x95, 0x8c, 0xd2, 0xbe, 0xb5, 0xde, 0xdc, 0x74, 0xa4, 0x21,
	0x30, 0x55, 0x1f, 0x54, 0x38, 0x40, 0x82, 0x3b, 0xa4, 0xfd, 0x41, 0x85, 0x3b, 0x2a, 0x19, 0xa1,
	0x68, 0x32, 0x63, 0x91, 0x6d, 0x44, 0x93, 0x19, 0x89, 0xfc, 0x0e, 0x6f, 0x94, 0xc6, 0xfe, 0x4d,
	0x68, 0x73, 0x59, 0xe3, 0xe4, 0x21, 0x30, 0x4f, 0xa3, 0x61, 0x8e, 0x34, 0x61, 0xf6, 0x25, 0x38,
	0x54, 0xd8, 0x75, 0x38, 0xb1, 0xc1, 0xe9, 0xb7, 0x28, 0xfd, 0xbd, 0x22, 0x05, 0xa5, 0xd4, 0x0b,
	0xb0, 0xa7, 0x51, 0x6a, 0x2a, 0xc4, 0x96, 0xb4, 0xf6, 0x0f, 0xc9, 0x66, 0x1a, 0x8b, 0x35, 0xb0,
	0xa2, 0x23, 0xb2, 0xe8, 0x4a, 0x2b, 0x3a, 0x2a, 0xf6, 0xb0, 0x6a, 0xf6, 0x68, 0x7e, 0x7e, 0x0f,
	0xbb, 0xb4, 0xc7, 0x8f, 0xd0, 0xdc, 0x55, 0x99, 0xb8, 0x0e, 0x9d, 0x89, 0x0a, 0x47, 0x03, 0x3e,
	0x3a, 0xc6, 0xd0, 0x45, 0x06, 0xc5, 0xea, 0x3a, 0x74, 0xe6, 0xea, 0x44, 0x0f, 0x78, 0x4f, 0x12,
	0x22, 0x83, 0xa2, 0x75, 0x07, 0x5a, 0xa6, 0x59, 0xc5, 0x0d, 0x68, 0x6a, 0x95, 0x91, 0x76, 0xf7,
	0x01, 0x94, 0x4a, 0x08, 0xd9, 0xfe, 0xf7, 0x06, 0x57, 0xe3, 0x0d, 0xeb, 0x99, 0xb9, 0x73, 0x46,
	0xef, 0x26, 0xb4, 0xb9, 0xc9, 0x6b, 0x53, 0xf0, 0x35, 0x8b, 0xcf, 0x17, 0x25, 0x7f, 0x1b, 0x6c,
	0x2c, 0xc1, 0x45, 0xbd, 0x34, 0xca, 0xf5, 0xf2, 0xff, 0x4a, 0x9e, 0x2e, 0x95, 0x6a, 0x76, 0x11,
	0x45, 0x7f, 0x0b, 0xda, 0x3c, 0x4b, 0xc4, 0x2d, 0xb0, 0xb1, 0x8e, 0xd9, 0xe5, 0x6e, 0xb9, 0xc6,
	0x49, 0xe0, 0x3f, 0x66, 0x6c, 0xcd, 0xe9, 0x72, 0x5d, 0xe3, 0x76, 0x8d, 0x2e, 0xd5, 0x1e, 0x0d,
	0xa0, 0x5a, 0x4f, 0xbe, 0x60, 0xb1, 0x99, 0x48, 0xa3, 0x20, 0xad, 0x94, 0xf9, 0x28, 0x48, 0x29,
	0x3b, 0x3f, 0x80, 0xfd, 0x56, 0xab, 0x2c, 0xef, 0x18, 0x6b, 0xd1, 0x31, 0x35, 0xd7, 0x7c, 0x7e,
	0x99, 0xd8, 0x8b, 0xcb, 0xe4, 0x29, 0x78, 0xef, 0x52, 0x9d, 0x14, 0xd7, 0x14, 0x5f, 0x39, 0x19,
	0x77, 0x5f, 0x4f, 0xe2, 0x52, 0x6c, 0x80, 0x93, 0x6a, 0x95, 0x99, 0xee, 0x5b, 0x38, 0x83, 0x3b,
	0x4b, 0x23, 0xf1, 0xff, 0x6c, 0x80, 0xfd, 0x5e, 0x9d, 0xe8, 0x4f, 0x44, 0xfe, 0x5b, 0x2e, 0xb1,
	0x52, 0xf8, 0xaf, 0xb0, 0x15, 0xd4, 0xa2, 0x1f, 0xca, 0x01, 0x15, 0x1e, 0xdd, 0xf4, 0xf7, 0xa0,
	0x83, 0x71, 0x1a, 0x94, 0xaa, 0xfe, 0x4c, 0xc6, 0xdc, 0x31, 0xaf, 0xfc, 0x87, 0xe0, 0xe6, 0x36,
	0x44, 0x17, 0xda, 0xbb, 0x2a, 0x43, 0xd2, 0x5b, 0x11, 0xab, 0xe0, 0x62, 0x01, 0x11, 0xd5, 0x40,
	0x0a, 0x95, 0x89, 0xb2, 0xfc, 0xbf, 0x8a, 0xab, 0x94, 0xfd, 0x5e, 0x9a, 0x3a, 0xb7, 0x2b, 0xf5,
	0xf2, 0xc9, 0xb1, 0xee, 0x83, 0x8d, 0x73, 0x7b, 0xf9, 0xbe, 0xe4, 0x99, 0x4e, 0x32, 0xc2, 0x24,
	0x6a, 0xbe, 0x3c, 0xf7, 0x79, 0x9a, 0x93, 0x4c, 0xdc, 0x00, 0x6b, 0x32, 0xe3, 0x79, 0x5f, 0x9d,
	0xe3, 0xd6, 0x64, 0x26, 0x6e, 0x99, 0x36, 0x6a, 0xd5, 0x4d, 0x70, 0x94, 0xe0, 0x16, 0x38, 0x9f,
	0x97, 0xee, 0xc5, 0x7c, 0x76, 0x93, 0x0c, 0x31, 0x54, 0x95, 0x6e, 0xed, 0xd4, 0x26, 0x99, 0x39,
	0x6a, 0xb4, 0x3c, 0xd9, 0xf3, 0x79, 0x4d, 0x32, 0xff, 0x11, 0xac, 0x51, 0xbd, 0x2c, 0x1e, 0x22,
	0x77, 0x2a, 0x0f, 0x11, 0xc1, 0x5a, 0x65, 0x90, 0x69, 0xaf, 0xbd, 0xaa, 0x66, 0x1a, 0xa3, 0xe6,
	0xc1, 0x67, 0x34, 0xf9, 0xe9, 0x87, 0x1d, 0x66, 0xe5, 0x1d, 0xe6, 0xff, 0x5a, 0xb1, 0x54, 0x9f,
	0xc1, 0x3b, 0x95, 0x0c, 0x7e, 0xf2, 0x54, 0x68, 0xfb, 0xf5, 0x73, 0x7e, 0xb6, 0x5a, 0xaf, 0x9f,
	0xfb, 0xdf, 0x01, 0xec, 0x27, 0xfa, 0x7d, 0x60, 0x2e, 0x93, 0xba, 0x99, 0x9f, 0xf7, 0x97, 0x55,
	0x7a, 0x46, 0xdf, 0x83, 0xd6, 0x7e, 0x94, 0xd6, 0x9f, 0x84, 0x7b, 0xcf, 0x5a, 0xf4, 0xde, 0x3f,
	0x16, 0xb4, 0xf6, 0xa7, 0xea, 0x54, 0x27, 0xe7, 0xbe, 0xf0, 0x36, 0xc0, 0xc1, 0xfe, 0xc0, 0xf7,
	0x60, 0xb9, 0x11, 0xb1, 0x9c, 0xa5, 0x91, 0x88, 0x9b, 0x00, 0x98, 0xa1, 0x81, 0xd1, 0xb6, 0x49,
	0xbb, 0x83, 0x9c, 0x1d, 0xb2, 0xb0, 0x0d, 0xab, 0x71, 0xa2, 0xe7, 0x41, 0xc8, 0x00, 0x87, 0x0c,
	0xfd, 0x2f, 0x2f, 0x16, 0x3a, 0xce, 0xfd, 0x7d, 0x42, 0x90, 0xc2, 0x6e, 0x98, 0x25, 0xa7, 0xb2,
	0x1b, 0x2f, 0x38, 0x58, 0x88, 0xe8, 0x49, 0x8b, 0x34, 0x7b, 0x45, 0x99, 0xa1, 0xdf, 0xe4, 0x58,
	0xe5, 0xee, 0x6d, 0x57, 0xee, 0x5e, 0xbc, 0x6a, 0x86, 0x2a, 0x1c, 0xea, 0xe9, 0x60, 0x32, 0xa3,
	0x22, 0x74, 0xa5, 0x6b, 0x18, 0x7b, 0xb3, 0xff, 0xbe, 0x01, 0x6f, 0x79, 0x67, 0x8c, 0xcc, 0x91,
	0x3e, 0xe5, 0xc8, 0xe3, 0x52, 0xdc, 0x05, 0xe7, 0x44, 0x4d, 0x67, 0x9a, 0x27, 0x6b, 0xde, 0x95,
	0x8b, 0x74, 0x49, 0x23, 0x7f, 0x6c, 0x3d, 0x6a, 0xf8, 0x5d, 0xe8, 0x48, 0x3d, 0x3c, 0x89, 0x12,
	0x7c, 0xe7, 0x4d, 0x0a, 0xa2, 0xe6, 0x99, 0xd7, 0x3b, 0xc7, 0x33, 0xef, 0x2e, 0xb4, 0x63, 0x8a,
	0x50, 0x9e, 0x80, 0x5e, 0x25, 0x6e, 0x32, 0x97, 0xfa, 0xab, 0x00, 0x4f, 0x75, 0xb6, 0x9d, 0x68,
	0x85, 0xfb, 0x9e, 0x2c, 0xa8, 0x0b, 0xbe, 0x2f, 0xaf, 0x42, 0x1b, 0x3f, 0x85, 0xf2, 0xcf, 0x11,
	0x47, 0xb6, 0x90, 0x7c, 0x46, 0xf1, 0x24, 0x01, 0x95, 0xa2, 0x4d, 0x3a, 0x2e, 0x32, 0x5e, 0xa9,
	0x63, 0xbd, 0xf5, 0x47, 0x03, 0x60, 0x31, 0xac, 0x04, 0x40, 0xeb, 0x5d, 0x78, 0x14, 0x85, 0x73,
	0xf3, 0xd9, 0x84, 0xf3, 0xc9, 0x48, 0xbd, 0x06, 0xd1, 0x89, 0x9a, 0x33, 0x6d, 0xe1, 0x9c, 0xdc,
	0x9b, 0x31, 0x65, 0x8b, 0x1e, 0x74, 0x76, 0x55, 0xc6, 0xa4, 0x8b, 0x60, 0x9c, 0x2a, 0x4c, 0x7b,
	0x48, 0xe3, 0x04, 0x61, 0x7a, 0xdd, 0x18, 0x8b, 0x62, 0xa6, 0x7f, 0xda, 0xda, 0x85, 0x96, 0x79,
	0xa7, 0x88, 0x0e, 0x38, 0xe6, 0x43, 0x6d, 0x45, 0xb4, 0xc0, 0x7a, 0x19, 0x79, 0x0d, 0x1c, 0xd6,
	0xa8, 0xbc, 0x37, 0x53, 0x9e, 0x85, 0x1b, 0xbd, 0x09, 0x54, 0x38, 0x46, 0x8e, 0xd7, 0xa4, 0x53,
	0xa8, 0xe0, 0x49, 0xf0, 0x42, 0x45, 0x9e, 0xbd, 0xb5, 0x6d, 0x66, 0x37, 0x19, 0x5a, 0x05, 0xf7,
	0x65, 0xc0, 0xb8, 0x15, 0xf4, 0xec, 0xe7, 0x19, 0xad, 0x1b, 0xb8, 0xde, 0x0e, 0x69, 0x6d, 0x89,
	0x4b, 0xd0, 0x7d, 0x1b, 0xeb, 0x61, 0xa0, 0xa6, 0xc6, 0xe0, 0xd6, 0x37, 0xd0, 0x2d, 0xf5, 0x7e,
	0xf1, 0xf1, 0xf8, 0x36, 0x53, 0x09, 0x7e, 0x4c, 0x5e, 0x86, 0x1e, 0xd1, 0x3b, 0x51, 0x98, 0x05,
	0xe1, 0x4c, 0x7b, 0x8d, 0xc3, 0x16, 0x25, 0xf8, 0xe1, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdb,
	0x78, 0xc9, 0x84, 0x82, 0x0f, 0x00, 0x00,
}
