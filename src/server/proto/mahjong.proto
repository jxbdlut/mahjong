syntax = "proto3";

package proto;

message LoginReq
{
    uint64 uid = 1;
    string passwd = 2;
    string name = 3;
}

message LoginRsp
{
    int32 err_code = 1;
    string err_msg = 2;
}

message CreateTableReq
{
    uint64 uid = 1;
}

message CreateTableRsp
{
    int32 err_code = 1;
    string err_msg = 2;
    uint32 table_id = 3;
}

message JoinTableReq
{
    uint64 uid = 1;
    uint32 table_id = 2;
}

message JoinTableRsp
{
    int32 err_code = 1;
    string err_msg = 2;
}

enum OperatType{
   Unkonw = 0x00;
   DealOperat = 0x01;
   DrawOperat = 0x02;
   HuOperat = 0x04;
   EatOperat = 0x08;
   PongOperat = 0x10;
}

message OperatReq
{
    OperatType type = 1;
    DealReq dealReq = 2;
    DrawReq drawReq = 3;
    HuReq huReq = 4;
    EatReq eatReq = 5;
    PongReq pongReq = 6;
}

message OperatRsp
{
    int32 err_code = 1;
    string err_msg = 2;
    OperatType type = 3;
    DealRsp dealRsp = 4;
    DrawRsp drawRsp = 5;
    HuRsp huRsp = 6;
    EatRsp eatRsp = 7;
    PongRsp pongRsp = 8;
}

message DealReq
{
    uint64 uid = 1;
    repeated int32 cards = 2;
    int32 fan_card = 3;
    int32 hun_card = 4;
}

message DealRsp
{

}

message DrawReq
{
    int32 card = 1;
}

message DrawRsp
{
    int32 card = 1;
}

message HuReq
{
    int32 card = 1;
}

message HuRsp
{
    bool ok = 1;
}

message Eat
{
    repeated int32 hand_card = 1;
    repeated int32 wave_card = 2;
}

message EatReq
{
    repeated Eat eat = 1;
}

message EatRsp
{
    Eat eat = 1;
    int32 dis_card = 2;
}

message PongReq
{
    enum GangType {
        MingGang = 0;
        BuGang = 1;
        AnGang = 2;
    }
    int32 card = 1;
    int32 count = 2;
    GangType type = 3;

}

message PongRsp
{
    int32 count = 1;
    int32 card = 2;
    int32 dis_card = 3;
}

message UserJoinTableMsg
{
    uint32 tid = 1;
    uint64 uid = 2;
    string name = 3;
    int32 pos = 4;
}

service MahjongService {
    rpc Operat(OperatReq) returns (OperatRsp);
}