syntax = "proto3";

package proto;

message LoginReq
{
    uint64 uid = 1;
    string passwd = 2;
    string name = 3;
}

message LoginRsp
{
    int32 err_code = 1;
    string err_msg = 2;
    bool need_recover = 3;
}

message CreateTableReq
{
    enum TableType {
        TableRobot = 0;
        TableNomal = 1;
    }
    int32 type = 1;
    int32 area = 2;
}

message CreateTableRsp
{
    int32 err_code = 1;
    string err_msg = 2;
    uint32 table_id = 3;
}

message JoinTableReq
{
    uint32 table_id = 2;
}

message JoinTableRsp
{
    int32 err_code = 1;
    string err_msg = 2;
    int32 pos = 3;
}

enum OperatType {
   Unkonw = 0x00;
   DealOperat = 0x01;
   DrawOperat = 0x02;
   HuOperat = 0x04;
   EatOperat = 0x08;
   PongOperat = 0x10;
   GangOperat = 0x20;
   DropOperat = 0x40;
}

message OperatReq
{
    OperatType type = 1;
    DealReq dealReq = 2;
    DrawReq drawReq = 3;
    HuReq huReq = 4;
    EatReq eatReq = 5;
    PongReq pongReq = 6;
    GangReq gangReq = 7;
    DropReq dropReq = 8;
}

message OperatRsp
{
    int32 err_code = 1;
    string err_msg = 2;
    OperatType type = 3;
    DealRsp dealRsp = 4;
    DrawRsp drawRsp = 5;
    HuRsp huRsp = 6;
    EatRsp eatRsp = 7;
    PongRsp pongRsp = 8;
    GangRsp gangRsp = 9;
    DropRsp dropRsp = 10;
}

message DealReq
{
    uint64 uid = 1;
    repeated int32 cards = 2;
    int32 fan_card = 3;
    int32 hun_card = 4;
}

message DealRsp
{

}

message DrawReq
{
    int32 card = 1;
}

message DrawRsp
{

}

enum HuType {
    Nomal = 0;
    Mo    = 1;
    GangHua = 2;
    QiangGang = 3;
    HaiDiLao  = 4;
}

message HuReq
{
    int32 card = 1;
    HuType type = 2;
    uint64 lose = 3;
}

message HuRsp
{
    bool ok = 1;
    int32 card = 2;
    HuType type = 3;
    uint64 lose = 4;
}

message Eat
{
    repeated int32 hand_card = 1;
    repeated int32 wave_card = 2;
}

message EatReq
{
    repeated Eat eat = 1;
}

message EatRsp
{
    bool ok = 1;
    Eat eat = 2;
}

message PongReq
{
    int32 card = 1;
}

message PongRsp
{
    bool ok = 1;
    int32 card = 2;
}

enum GangType {
    MingGang = 0;
    BuGang = 1;
    AnGang = 2;
    SpecialGang = 3;
}

message Gang {
    repeated int32 cards = 1;
    GangType type = 2;
}

message GangReq {
    repeated Gang gang = 1;
}

message GangRsp {
    bool ok = 1;
    Gang gang = 2;
}

message DropReq
{
    int32 card = 2;
}

message DropRsp
{
    int32 dis_card = 3;
}

message Seat
{
    uint64 uid = 2;
    string name = 3;
    int32 pos = 4;
}

message UserJoinTableMsg
{
    uint32 tid = 1;
    repeated Seat seats = 2;
}

message Wave
{
    enum WaveType {
        EatWave = 0;
        PongWave = 1;
        GangWave = 2;
    }
    repeated int32 cards = 1;
    WaveType wave_type = 2;
    GangType gang_type = 3;
}

message OperatMsg
{
    uint64 uid = 1;
    OperatType type = 2;
    DealRsp deal = 3;
    DrawRsp draw = 4;
    HuRsp hu = 5;
    EatRsp eat = 6;
    PongRsp pong = 7;
    GangRsp gang = 8;
    DropRsp drop = 9;
}

enum TableOperat {
    TableStart = 0;
    TableContinue = 1;
}

message TableOperatReq
{
    TableOperat type = 1;
}

message TableOperatRsp
{
    TableOperat Type = 1;
    bool ok = 2;
}

message TableOperatMsg
{
    uint64 uid = 1;
    TableOperat type = 2;
    bool OK = 3;
}

message PreWinCard
{
    int32 card = 1;
    string name = 2;
}

message PosMsg
{
    uint64 uid = 1;
    int32 pos = 2;
}

message Player
{
    uint64 uid = 1;
    repeated int32 cards = 2;
    repeated Wave waves = 3;
    repeated int32 drop_cards = 4;
    repeated int32 need_hun = 5;
    repeated int32 need_hun_with_eye = 6;
    repeated bool  is_need_update = 7;
    map<int32, PreWinCard> prewin_cards = 8;
    repeated PosMsg pos = 9;
    int32 hun_card = 10;
    bool cancel_hu = 11;
}

message RecvorReq
{

}

message RecvorRsp
{
    uint32 err_code = 1;
    string err_msg = 2;
    repeated Player players = 3;
}

message GetAreaReq
{

}

message GetAreaRsp
{
    int32 err_code = 1;
    string err_msg = 2;
    int32 area_id = 3;
    string area_name = 4;
}